// <Image source={{uri: "https://cdn-icons-gif.flaticon.com/15578/15578915.gif"}} style={{height:50, width: 50}} />
// if (roomName != originName) {
//     console.log(123);
//     const rquery = RENTERS.where("room.id", "==", id).get();
//     console.log(rquery.ref);
//     const iquery = INDICES.where("room.id", "==", id).get();
//     console.log(rquery);
//     const cquery = CONTRACTS.where("room.id", "==", id).get();
//     //console.log(rquery);
//     const bquery = BILLS.where("room.id", "==", id).get();
//     //console.log(rquery);
//     if(!rquery.empty){
//       rquery.forEach((doc) => {
//         batch.update(doc.ref, {
//           room: { name: roomName },
//         });
//       });
//     }
//     if(!iquery.empty){
//       iquery.forEach((doc) => {
//         batch.update(doc.ref, {
//           room: { name: roomName },
//         });
//       });
//     }
//     if(!cquery.empty){
//       cquery.forEach((doc) => {
//         batch.update(doc.ref, {
//           room: { name: roomName },
//         });
//       });
//     }
//     if(!bquery.empty){
//       bquery.forEach((doc) => {
//         batch.update(doc.ref, {
//           room: { name: roomName },
//         });
//       });
//     }
//   }

//   const handleAddNewThuChi = async () => {
//     try {
//       if (selectGroup === "") {
//         Alert.alert("Chưa chọn nhóm giao dịch!");
//       } else if (money <= 0) {
//         Alert.alert("Khoản giao dịch không được nhỏ hơn hoặc bằng 0!");
//       } else if (target.table != "" && target.id == "") {
//         Alert.alert("Chưa chọn đối tượng!");
//       } else {
//         THUCHIS.add({
//           //date: date.toLocaleDateString("vi"),
//           money,
//           type,
//           note,
//           group: selectGroup,
//           target,
//         })
//           .then((docRef) => {
//             let upImage = [];
//             THUCHIS.doc(docRef.id).update({
//               id: docRef.id,
//               images: upImage,
//             });
//             if (imageCount !== 0) {
//               let num = 1;

//               // Tạo mảng các Promise tải lên ảnh
//               const uploadPromises = images.map((image) => {
//                 const refImage = storage().ref(
//                   "/images/" + docRef.id + "-image" + num + ".jpg"
//                 );
//                 num += 1;

//                 return refImage
//                   .putFile(image.url)
//                   .then(() => refImage.getDownloadURL())
//                   .then((link) => {
//                     upImage = [...upImage, { url: link }]; // Thêm ảnh vào mảng upImage
//                   })
//                   .catch((e) =>
//                     console.error("Lỗi khi tải lên ảnh:", e.message)
//                   );
//               });

//               // Chờ tất cả các ảnh tải lên xong trước khi cập nhật Firestore
//               Promise.all(uploadPromises)
//                 .then(() => {
//                   console.log("Danh sách ảnh tải lên hoàn chỉnh:", upImage);
//                   THUCHIS.doc(docRef.id).update({ images: upImage });
//                 })
//                 .catch((e) =>
//                   console.error("Lỗi khi cập nhật Firestore:", e.message)
//                 );
//             }
//           })
//           .then(() => {
//             Alert.alert("Thêm giao dịch mới thành công");
//             navigation.goBack();
//           })
//           .catch((e) => {
//             Alert.alert(e.message);
//           });
//       }
//     } catch (e) {
//       Alert.alert(e.message);
//     }
//   };
  // Zoom ảnh 
  // const [imageHeight, setImageHeight] = useState(100);
  // const [imageWidth, setImageWidth] = useState(Dimensions.get("window").width);
  // const [scale, setScale] = useState(new Animated.Value(1)); // Giá trị scale cho zoom
  // const [lastScale, setLastScale] = useState(1); // Lưu trữ giá trị scale cuối cùng
  // const translateX = useRef(new Animated.Value(0)).current;
  // const translateY = useRef(new Animated.Value(0)).current;
  // const maxTranslate = 100; // Giới hạn di chuyển theo cả chiều x và y
  // const lastTranslateX = useRef(0);
  // const lastTranslateY = useRef(0);
    // useEffect(() => {
  //   if (selectImage) {
  //     let imagePath = selectImage;

  //     const isLocal = selectImage.startsWith("/");

  //     if (isLocal) {
  //       imagePath = `file://${selectImage}`;
  //     }

  //     Image.getSize(
  //       imagePath,
  //       (width, height) => {
  //         const aspectRatio = height / width;
  //         const newHeight = imageWidth * aspectRatio;
  //         setImageHeight(newHeight);
  //       },
  //       (error) => {
  //         console.error("Lỗi khi lấy kích thước ảnh:", error);
  //       }
  //     );
  //   }
  // }, [selectImage, imageWidth]);
    // const onPinchEvent = Animated.event([{ nativeEvent: { scale } }], {
  //   useNativeDriver: false,
  // });
  // const onPinchStateChange = (event) => {
  //   if (event.nativeEvent.state === State.END) {
  //     setLastScale(lastScale * event.nativeEvent.scale);
  //     scale.setValue(1);
  //   } else if (event.nativeEvent.state === State.BEGAN) {
  //     setLastScale(scale._value);
  //   }
  // };

  // const onPanGestureEvent = Animated.event(
  //   [
  //     {
  //       nativeEvent: {
  //         translationX: translateX,
  //         translationY: translateY,
  //       },
  //     },
  //   ],
  //   { useNativeDriver: false }
  // );

  // const onPanStateChange = (event) => {
  //   if (event.nativeEvent.state === State.END) {
  //     lastTranslateX.current += event.nativeEvent.translationX;
  //     lastTranslateY.current += event.nativeEvent.translationY;

  //     // Giới hạn vị trí ảnh trong phạm vi nhất định
  //     lastTranslateX.current = Math.max(
  //       -maxTranslate,
  //       Math.min(lastTranslateX.current, maxTranslate)
  //     );
  //     lastTranslateY.current = Math.max(
  //       -maxTranslate,
  //       Math.min(lastTranslateY.current, maxTranslate)
  //     );

  //     translateX.setOffset(lastTranslateX.current);
  //     translateY.setOffset(lastTranslateY.current);

  //     translateX.setValue(0);
  //     translateY.setValue(0);
  //   } else if (event.nativeEvent.state === State.BEGAN) {
  //     translateX.setOffset(lastTranslateX.current);
  //     translateY.setOffset(lastTranslateY.current);
  //   }
  // };
  {/* <Modal
        visible={isModalVisible}
        transparent={true}
        onBackdropPress={closeModal}
        animated
      >
        <View
          style={{
            flex: 1,
            backgroundColor: "black",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <GestureHandlerRootView
            style={{
              flex: 1,
              backgroundColor: "black",
              justifyContent: "center",
              alignItems: "center",
            }}
          >

            <PanGestureHandler
              onGestureEvent={onPanGestureEvent}
              onHandlerStateChange={onPanStateChange}
            >
              <Animated.View>
                <PinchGestureHandler
                onGestureEvent={onPinchEvent}
                onHandlerStateChange={onPinchStateChange}
              >
                <Animated.Image
                  source={{
                    uri: selectImage,
                  }}
                  style={[
                    {
                      transform: [
                        { scale },
                        {
                          translateX: translateX.interpolate({
                            inputRange: [-maxTranslate, maxTranslate],
                            outputRange: [-maxTranslate, maxTranslate],
                            extrapolate: "clamp", // Giới hạn trong phạm vi maxTranslate
                          }),
                        },
                        {
                          translateY: translateY.interpolate({
                            inputRange: [-maxTranslate, maxTranslate],
                            outputRange: [-maxTranslate, maxTranslate],
                            extrapolate: "clamp",
                          }),
                        },
                      ],
                      height: imageHeight,
                      width: imageWidth,
                    },
                  ]}
                  resizeMode="contain"
                />
              </PinchGestureHandler>
              </Animated.View>
            </PanGestureHandler>
          </GestureHandlerRootView>
          <TouchableOpacity
            onPress={closeModal}
            style={{ position: "absolute", top: 40, right: 20 }}
          >
            <Text style={{ color: "white", fontSize: 20 }}>Đóng</Text>
          </TouchableOpacity>
        </View>
      </Modal> */}

// // Import các thư viện cần thiết
// import { initializeApp } from "firebase/app";
// import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, deleteUser } from "firebase/auth";

// // Cấu hình Firebase
// const firebaseConfig = {
//   apiKey: "YOUR_API_KEY",
//   authDomain: "YOUR_AUTH_DOMAIN",
//   projectId: "YOUR_PROJECT_ID",
//   storageBucket: "YOUR_STORAGE_BUCKET",
//   messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
//   appId: "YOUR_APP_ID",
// };

// // Khởi tạo Firebase
// const app = initializeApp(firebaseConfig);
// const auth = getAuth(app);

// // Hàm tạo tài khoản
// export const registerUser = async (email, password) => {
//   try {
//     const userCredential = await createUserWithEmailAndPassword(auth, email, password);
//     console.log("User created:", userCredential.user);
//     return userCredential.user;
//   } catch (error) {
//     console.error("Error creating user:", error);
//     throw error;
//   }
// };

// // Hàm đăng nhập
// export const loginUser = async (email, password) => {
//   try {
//     const userCredential = await signInWithEmailAndPassword(auth, email, password);
//     console.log("User logged in:", userCredential.user);
//     return userCredential.user;
//   } catch (error) {
//     console.error("Error logging in:", error);
//     throw error;
//   }
// };

// // Hàm đăng xuất
// export const logoutUser = async () => {
//   try {
//     await signOut(auth);
//     console.log("User logged out");
//   } catch (error) {
//     console.error("Error logging out:", error);
//     throw error;
//   }
// };

// // Hàm xóa tài khoản
// export const deleteUserAccount = async () => {
//   try {
//     const user = auth.currentUser;
//     if (user) {
//       await deleteUser(user);
//       console.log("User deleted");
//     } else {
//       throw new Error("No user is currently logged in");
//     }
//   } catch (error) {
//     console.error("Error deleting user:", error);
//     throw error;
//   }
// };
